{"version":3,"file":"circularProgressBar.min.js","sources":["../sources/helpers/defaults.js","../sources/helpers/function.js","../sources/index.js"],"sourcesContent":["/**\r\n * @typedef {Object} - Default object\r\n * @prop {String} [colorSlice] - Progress color circle\r\n * @prop {String} [fontColor] - Font color\r\n * @prop {String} [fontSize] - Font size\r\n * @prop {Number} [fontWeight] - Font weight\r\n * @prop {Array} [linearGradient] - Linear gradien for circle\r\n * @prop {Boolean} [number] - Show/hide number\r\n * @prop {Boolean} [round] - Path rounding\r\n * @prop {String} [fill] - Inner circle color\r\n * @prop {String} [unit] - Different unit instead of percentage (%) inside the circle\r\n * @prop {Number} [rotation] - Chart rotation\r\n * @prop {Number} [size] - Size progress bar width and height in px\r\n * @prop {Number} [stroke] - Stroke width, chart thickness\r\n */\r\n/**\r\n * Returns the default options of the component\r\n * @return {CPBOptions}\r\n */\r\nconst defaultOptions = {\r\n  colorSlice: \"#00a1ff\",\r\n  fontColor: \"#000\",\r\n  fontSize: \"1.6rem\",\r\n  fontWeight: 400,\r\n  lineargradient: false,\r\n  number: true,\r\n  round: false,\r\n  fill: \"none\",\r\n  unit: \"%\",\r\n  rotation: -90,\r\n  size: 200,\r\n  stroke: 10,\r\n};\r\n\r\nexport default defaultOptions;\r\n","/**\r\n *\r\n * @param {Object} object\r\n * @returns {String}\r\n */\r\nconst styleTransform = ({ rotation, animationSmooth }) => {\r\n  const smoothAnimation = animationSmooth\r\n    ? `transition: stroke-dashoffset ${animationSmooth}`\r\n    : \"\";\r\n\r\n  return `transform:rotate(${rotation}deg);transform-origin: 50% 50%;${smoothAnimation}`;\r\n};\r\n\r\n/**\r\n * Set \"stroke-dasharray\": \"1, 2\"\r\n * @param {String} type\r\n * @returns {Object}\r\n */\r\nconst strokeDasharray = (type) => {\r\n  return {\r\n    \"stroke-dasharray\": type || \"264\",\r\n  };\r\n};\r\n\r\n/**\r\n * Set type stroke-linecap\r\n * @param {String} round\r\n * @returns {Object}\r\n */\r\nconst strokeLinecap = ({ round }) => {\r\n  return {\r\n    \"stroke-linecap\": round ? \"round\" : \"\",\r\n  };\r\n};\r\n\r\n/**\r\n * Set font sieze/weight\r\n *\r\n * @param {Object} options\r\n * @returns {Object}\r\n */\r\nconst fontSettings = (options) => {\r\n  return {\r\n    \"font-size\": options.fontSize,\r\n    \"font-weight\": options.fontWeight,\r\n  };\r\n};\r\n\r\n/**\r\n *\r\n * @param {String} element\r\n * @returns {HTMLElement}\r\n */\r\nconst querySelector = (element) => document.querySelector(element);\r\n\r\n/**\r\n * Set color or linear-gradient\r\n *\r\n * @param {String} element\r\n * @param {Object} object\r\n */\r\nconst setColor = (element, { lineargradient, index, colorSlice }) => {\r\n  element.setAttribute(\r\n    \"stroke\",\r\n    lineargradient ? `url(#linear-${index})` : colorSlice,\r\n  );\r\n};\r\n\r\n/**\r\n * Set attribute to specific element\r\n *\r\n * @param {String} element\r\n * @param {Object} object\r\n */\r\nconst setAttribute = (element, object) => {\r\n  for (const key in object) {\r\n    element?.setAttribute(key, object[key]);\r\n  }\r\n};\r\n\r\n/**\r\n * Create svg element\r\n *\r\n * @param {String} type\r\n * @returns {SVGElement}\r\n */\r\nconst createNSElement = (type) =>\r\n  document.createElementNS(\"http://www.w3.org/2000/svg\", type);\r\n\r\n/**\r\n * Create svg tspan\r\n *\r\n * @param {String} className\r\n * @param {String} unit\r\n * @returns {HTMLElement}\r\n */\r\nconst tspan = (className, unit) => {\r\n  const element = createNSElement(\"tspan\");\r\n\r\n  element.classList.add(className);\r\n  if (unit) element.textContent = unit;\r\n  return element;\r\n};\r\n\r\n/**\r\n * Function generate stroke-dashoffset\r\n *\r\n * @param {Number} count\r\n * @param {Boolean} inverse - Counterclockwise animation\r\n * @param {Number} cut - Angle of the circle sector\r\n * @returns {Number}\r\n */\r\nconst dashOffset = (count, inverse, cut) => {\r\n  const cutChar = cut ? (264 / 100) * (100 - cut) : 264;\r\n  const angle = 264 - (count / 100) * cutChar;\r\n\r\n  // https://github.com/tomickigrzegorz/circular-progress-bar/issues/87\r\n  // inverse option is not working in ios safari\r\n  // return inverse ? `${264 - angle}` : angle;\r\n  return inverse ? -angle : angle;\r\n};\r\n\r\n/**\r\n * @param {HTMLElement} element\r\n * @param {HTMLElement} el\r\n * @param {String} type\r\n */\r\nconst insertAdElement = (element, el, type = \"beforeend\") =>\r\n  element.insertAdjacentElement(type, el);\r\n\r\n/**\r\n * Generator function linear-gradient stop svg elements\r\n *\r\n * @param {Object} object\r\n */\r\nconst gradient = ({ index, lineargradient }) => {\r\n  const defsElement = createNSElement(\"defs\");\r\n  const linearGradient = createNSElement(\"linearGradient\");\r\n  linearGradient.id = `linear-${index}`;\r\n\r\n  const countGradient = [].slice.call(lineargradient);\r\n\r\n  defsElement.appendChild(linearGradient);\r\n\r\n  let number = 0;\r\n  countGradient.map((item) => {\r\n    const stopElements = createNSElement(\"stop\");\r\n\r\n    const stopObj = {\r\n      offset: `${number}%`,\r\n      \"stop-color\": `${item}`,\r\n    };\r\n    setAttribute(stopElements, stopObj);\r\n\r\n    linearGradient.appendChild(stopElements);\r\n    number += 100 / (countGradient.length - 1);\r\n  });\r\n\r\n  return defsElement;\r\n};\r\n\r\n/**\r\n * A function that generates tspan\r\n * elements with a number and unit\r\n *\r\n * @param {Object} options - Global configuration\r\n * @param {String} className\r\n */\r\nconst percent = (options, className) => {\r\n  const creatTextElementSVG = createNSElement(\"text\");\r\n\r\n  creatTextElementSVG.classList.add(`${className}-text-${options.index}`);\r\n\r\n  // create tspan element with number\r\n  // and insert to svg text element\r\n  insertAdElement(\r\n    creatTextElementSVG,\r\n    tspan(`${className}-percent-${options.index}`),\r\n  );\r\n\r\n  // create and insert unit to text element\r\n  insertAdElement(\r\n    creatTextElementSVG,\r\n    tspan(`${className}-unit-${options.index}`, options.unit),\r\n  );\r\n\r\n  // config to svg text\r\n  const obj = {\r\n    x: \"50%\",\r\n    y: \"50%\",\r\n    fill: options.fontColor,\r\n    \"text-anchor\": \"middle\",\r\n    dy: options.textPosition || \"0.35em\",\r\n    ...fontSettings(options),\r\n  };\r\n\r\n  setAttribute(creatTextElementSVG, obj);\r\n  return creatTextElementSVG;\r\n};\r\n\r\nexport {\r\n  createNSElement,\r\n  dashOffset,\r\n  fontSettings,\r\n  gradient,\r\n  insertAdElement,\r\n  percent,\r\n  querySelector,\r\n  setAttribute,\r\n  setColor,\r\n  strokeDasharray,\r\n  strokeLinecap,\r\n  styleTransform,\r\n};\r\n","import defaultOptions from \"./helpers/defaults\";\r\nimport {\r\n  createNSElement,\r\n  dashOffset,\r\n  fontSettings,\r\n  gradient,\r\n  insertAdElement,\r\n  percent,\r\n  querySelector,\r\n  setAttribute,\r\n  setColor,\r\n  strokeDasharray,\r\n  strokeLinecap,\r\n  styleTransform,\r\n} from \"./helpers/function\";\r\n\r\n/**\r\n * @class\r\n */\r\nexport default class CircularProgressBar {\r\n  /**\r\n   * CircularProgressBar constructor\r\n   *\r\n   * @param {String} pieName - class name\r\n   * @param {Object} globalObj - global configuration\r\n   */\r\n  constructor(pieName, globalObj = {}) {\r\n    this._className = pieName;\r\n    this._globalObj = globalObj;\r\n\r\n    const pieElements = document.querySelectorAll(`.${pieName}`);\r\n    const elements = [].slice.call(pieElements);\r\n    // add index to all progressbar\r\n    elements.map((item, idx) => {\r\n      const id = JSON.parse(item.getAttribute(\"data-pie\"));\r\n      item.setAttribute(\r\n        \"data-pie-index\",\r\n        id.index || globalObj.index || idx + 1,\r\n      );\r\n    });\r\n\r\n    this._elements = elements;\r\n  }\r\n\r\n  /**\r\n   * @param {object} outside\r\n   */\r\n  initial(outside) {\r\n    const triggeredOutside = outside || this._elements;\r\n    Array.isArray(triggeredOutside)\r\n      ? triggeredOutside.map((element) => this._createSVG(element))\r\n      : this._createSVG(triggeredOutside);\r\n  }\r\n\r\n  /**\r\n   * @param {SVGAElement} svg\r\n   * @param {HTMLElement} target\r\n   * @param {Object} options\r\n   */\r\n  _progress(svg, target, options) {\r\n    const pieName = this._className;\r\n    if (options.number) {\r\n      insertAdElement(svg, percent(options, pieName));\r\n    }\r\n\r\n    const progressCircle = querySelector(`.${pieName}-circle-${options.index}`);\r\n\r\n    const configCircle = {\r\n      fill: \"none\",\r\n      \"stroke-width\": options.stroke,\r\n      \"stroke-dashoffset\": \"264\",\r\n      ...strokeDasharray(),\r\n      ...strokeLinecap(options),\r\n    };\r\n    setAttribute(progressCircle, configCircle);\r\n\r\n    // animation progress\r\n    this.animationTo({ ...options, element: progressCircle }, true);\r\n\r\n    // set style and rotation\r\n    progressCircle.setAttribute(\"style\", styleTransform(options));\r\n\r\n    // set color\r\n    setColor(progressCircle, options);\r\n\r\n    // set width and height on div\r\n    target.setAttribute(\r\n      \"style\",\r\n      `width:${options.size}px;height:${options.size}px;`,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Callback function\r\n   *\r\n   * @param {Object} options\r\n   * @param {Boolean} initial\r\n   */\r\n  animationTo(options, initial = false) {\r\n    const pieName = this._className;\r\n    const previousConfigObj = JSON.parse(\r\n      querySelector(`[data-pie-index=\"${options.index}\"]`).getAttribute(\r\n        \"data-pie\",\r\n      ),\r\n    );\r\n\r\n    const circleElement = querySelector(`.${pieName}-circle-${options.index}`);\r\n\r\n    if (!circleElement) return;\r\n\r\n    // merging all configuration objects\r\n    const commonConfiguration = initial\r\n      ? options\r\n      : {\r\n          ...defaultOptions,\r\n          ...previousConfigObj,\r\n          ...options,\r\n          ...this._globalObj,\r\n        };\r\n\r\n    // update color circle\r\n    if (!initial) {\r\n      setColor(circleElement, commonConfiguration);\r\n    }\r\n\r\n    // font color update\r\n    if (!initial && commonConfiguration.number) {\r\n      const fontconfig = {\r\n        fill: commonConfiguration.fontColor,\r\n        ...fontSettings(commonConfiguration),\r\n      };\r\n      const textElement = querySelector(\r\n        `.${pieName}-text-${commonConfiguration.index}`,\r\n      );\r\n      setAttribute(textElement, fontconfig);\r\n    }\r\n\r\n    const centerNumber = querySelector(`.${pieName}-percent-${options.index}`);\r\n\r\n    if (commonConfiguration.animationOff) {\r\n      if (commonConfiguration.number)\r\n        centerNumber.textContent = `${commonConfiguration.percent}`;\r\n      circleElement.setAttribute(\r\n        \"stroke-dashoffset\",\r\n        dashOffset(commonConfiguration.percent * ((100 - (commonConfiguration.cut || 0)) / 100), commonConfiguration.inverse),\r\n      );\r\n      return;\r\n    }\r\n\r\n    // get numer percent from data-angel\r\n    let angle = JSON.parse(circleElement.getAttribute(\"data-angel\"));\r\n\r\n    // round if number is decimal\r\n    const percent = Math.round(options.percent);\r\n\r\n    // if percent 0 then set at start 0%\r\n    if (percent === 0) {\r\n      if (commonConfiguration.number) centerNumber.textContent = \"0\";\r\n      circleElement.setAttribute(\"stroke-dashoffset\", \"264\");\r\n    }\r\n\r\n    if (percent > 100 || percent < 0 || angle === percent) return;\r\n\r\n    let request;\r\n    let i = initial ? 0 : angle;\r\n\r\n    const fps = commonConfiguration.speed || 1000;\r\n    const interval = 1000 / fps;\r\n    const tolerance = 0.1;\r\n    let then = performance.now();\r\n\r\n    const performAnimation = (now) => {\r\n      request = requestAnimationFrame(performAnimation);\r\n      const delta = now - then;\r\n\r\n      if (delta >= interval - tolerance) {\r\n        then = now - (delta % interval);\r\n\r\n        // angle >= commonConfiguration.percent ? i-- : i++;\r\n        i = i < commonConfiguration.percent ? i + 1 : i - 1;\r\n      }\r\n\r\n      circleElement.setAttribute(\r\n        \"stroke-dashoffset\",\r\n        dashOffset(i, commonConfiguration.inverse, commonConfiguration.cut),\r\n      );\r\n      if (centerNumber && commonConfiguration.number) {\r\n        centerNumber.textContent = `${i}`;\r\n      }\r\n\r\n      circleElement.setAttribute(\"data-angel\", i);\r\n      circleElement.parentNode.setAttribute(\"aria-valuenow\", i);\r\n\r\n      if (i === percent) {\r\n        cancelAnimationFrame(request);\r\n      }\r\n\r\n      // return;\r\n    };\r\n\r\n    requestAnimationFrame(performAnimation);\r\n  }\r\n\r\n  /**\r\n   * Create svg elements\r\n   *\r\n   * @param {HTMLElement} element\r\n   */\r\n  _createSVG(element) {\r\n    const index = element.getAttribute(\"data-pie-index\");\r\n    const json = JSON.parse(element.getAttribute(\"data-pie\"));\r\n\r\n    const options = { ...defaultOptions, ...json, index, ...this._globalObj };\r\n\r\n    const svg = createNSElement(\"svg\");\r\n\r\n    const configSVG = {\r\n      role: \"progressbar\",\r\n      width: options.size,\r\n      height: options.size,\r\n      viewBox: \"0 0 100 100\",\r\n      \"aria-valuemin\": \"0\",\r\n      \"aria-valuemax\": \"100\",\r\n    };\r\n\r\n    setAttribute(svg, configSVG);\r\n\r\n    // colorCircle\r\n    if (options.colorCircle) {\r\n      svg.appendChild(this._circle(options));\r\n    }\r\n\r\n    // gradient\r\n    if (options.lineargradient) {\r\n      svg.appendChild(gradient(options));\r\n    }\r\n\r\n    svg.appendChild(this._circle(options, \"top\"));\r\n\r\n    element.appendChild(svg);\r\n\r\n    this._progress(svg, element, options);\r\n  }\r\n\r\n  /**\r\n   * Create circle top/bottom\r\n   *\r\n   * @param {Object} options\r\n   * @param {String} where\r\n   * @returns {SVGElement}\r\n   */\r\n  _circle(options, where = \"bottom\") {\r\n    const circle = createNSElement(\"circle\");\r\n\r\n    let configCircle = {};\r\n    if (options.cut) {\r\n      const dashoffset = 264 - (100 - options.cut) * 2.64;\r\n      configCircle = {\r\n        \"stroke-dashoffset\": options.inverse ? -dashoffset : dashoffset,\r\n        style: styleTransform(options),\r\n        ...strokeDasharray(),\r\n        ...strokeLinecap(options),\r\n      };\r\n    }\r\n\r\n    const objCircle = {\r\n      fill: options.fill,\r\n      stroke: options.colorCircle,\r\n      \"stroke-width\": options.strokeBottom || options.stroke,\r\n      ...configCircle,\r\n    };\r\n\r\n    if (options.strokeDasharray) {\r\n      Object.assign(objCircle, { ...strokeDasharray(options.strokeDasharray) });\r\n    }\r\n\r\n    const typeCircle =\r\n      where === \"top\"\r\n        ? { class: `${this._className}-circle-${options.index}` }\r\n        : objCircle;\r\n\r\n    const objConfig = {\r\n      cx: \"50%\",\r\n      cy: \"50%\",\r\n      r: 42,\r\n      \"shape-rendering\": \"geometricPrecision\",\r\n      ...typeCircle,\r\n    };\r\n\r\n    setAttribute(circle, objConfig);\r\n\r\n    return circle;\r\n  }\r\n}\r\n"],"names":["defaultOptions","colorSlice","fontColor","fontSize","fontWeight","lineargradient","number","round","fill","unit","rotation","size","stroke","styleTransform","_ref","animationSmooth","strokeDasharray","type","strokeLinecap","_ref2","fontSettings","options","querySelector","element","document","setColor","_ref3","index","setAttribute","object","key","createNSElement","createElementNS","tspan","className","classList","add","textContent","dashOffset","count","inverse","cut","angle","insertAdElement","el","insertAdjacentElement","constructor","pieName","globalObj","this","_className","_globalObj","pieElements","querySelectorAll","elements","slice","call","map","item","idx","id","JSON","parse","getAttribute","_elements","initial","outside","triggeredOutside","Array","isArray","_createSVG","_progress","svg","target","percent","creatTextElementSVG","obj","x","y","dy","textPosition","progressCircle","configCircle","animationTo","previousConfigObj","circleElement","commonConfiguration","fontconfig","textElement","centerNumber","animationOff","Math","request","i","interval","speed","then","performance","now","performAnimation","requestAnimationFrame","delta","parentNode","cancelAnimationFrame","json","configSVG","role","width","height","viewBox","colorCircle","appendChild","_circle","_ref4","defsElement","linearGradient","countGradient","stopElements","offset","length","gradient","where","circle","dashoffset","style","objCircle","strokeBottom","Object","assign","objConfig","cx","cy","r","class"],"mappings":"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"}